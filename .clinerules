## 重要

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

Rooは自身の判断を過信せず十分に検討し、積極的にユーザーへask-followup-questionし、相談します。

どんな時も必ずログ記録のルールに従い、roo-activity-loggerを使用してログを記録してください。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

## 作業開始準備

`git status` で現在のコンテキストを確認します。

その後、logs/をroo-activity-loggerでsearch_logsを使って確認して、現在のタスク状況を特定します。

エラーハンドリングおよびブーメランタスクの項目を必ず実行してください。

無関係な変更が多い場合は、別タスクとして開始するよう提案してください。

## ログ記録

- 全てのログはroo-activity-loggerを使用して記録してください
- ログは以下のディレクトリ構造に従って保存してください
  - `logs/activity/` - 通常の活動ログ（info, debug）
  - `logs/error/` - エラーログ（error, warn）
  - `logs/analytics/` - 分析用のデータログ（統計情報など）
- ログにはスタックトレースと実行コンテキストを含めてください
- 意図と文脈情報を記録してください

## 開発原則

### 機能指向アプローチ
- 技術レイヤーではなく機能単位での分割
- 関連コードのコロケーション（同一場所への配置）
- 過度な抽象化を避けたシンプルな設計

### ベックのTDD
- Red-Green-Refactor：失敗→成功→改善
- 実装前テスト：設計の指針
- 小さな検証サイクル：即時フィードバック
- 回帰防止：変更の安全性確保

### ファウラーの思想
- リファクタリング：動作維持での構造改善
- コードスメル：問題兆候の早期検知
- CI/CD：継続的な統合と配信
- 進化的アーキテクチャ：段階的な改善と適応

### 関数型アプローチ
- 純粋関数：予測可能な結果
- 不変性：副作用の局所化
- 型安全性：コンパイル時の安全性確保

## TypeScript実装ガイドライン

### 型駆動設計
- 明確な型定義を最初に作成
- anyの使用を避け、unknown型から絞り込み型安全性を確保
- 意味のある型名と関数インターフェース

### コード構造
- 機能ごとのディレクトリ分割
- 状態を持たない場合は関数を優先
- 依存を最小化し、明示的に注入

### エラー処理
- Result型による明示的なエラーハンドリング
- 網羅的なエラーケース定義
- エラーを値として扱う

## ブーメランタスク

複雑な調査や検討が必要な場合、`<new_task>`ツールで作業を分離します。

使用例:
```
<new_task>
<mode>domain-designer</mode>
<message>タスクデータモデルの最適化検討</message>
</new_task>

## エラーハンドリング

エラーが発生した場合は、以下の方針に従って処理してください。

### 再試行ポリシー

- 接続エラーやタイムアウトエラーは最大3回まで再試行してください
- 再試行する前に「再試行を行う理由」を記録してください
- 型エラーや構文エラーは再試行せず、明確なエラーメッセージを提示してください

### エラーの分析

- 同様のエラーが繰り返し発生する場合は、根本的な原因を分析してください
- エラーパターンを特定し、一般化された解決策を提案してください
- コードの改善提案があれば、それも記録してください
